import feedparser
from googletrans import Translator
from transformers import pipeline
from gtts import gTTS
from PIL import Image, ImageDraw, ImageFont
import requests
import time
import os
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1391393540252237886/mfR4DoXUhNHJ03EJIaWMxca3M87kxTnfIpLsnmLE0aJb2R5gTtngi6UL5lc7pTBbhPpN"

rss_feeds = {
    "‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á": "http://feeds.bbci.co.uk/news/politics/rss.xml",
    "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à": "http://feeds.reuters.com/reuters/businessNews",
    "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ": "http://feeds.bbci.co.uk/news/technology/rss.xml",
    "AI": "https://www.reuters.com/technology/ai/feed",
    "‡∏´‡∏∏‡πâ‡∏ô": "https://feeds.finance.yahoo.com/rss/2.0/headline?s=^DJI,^GSPC,^IXIC&region=US&lang=en-US",
    "‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï": "https://cryptonews.com/news/feed",
    "‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°": "http://feeds.bbci.co.uk/news/world/rss.xml",
    "‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û": "https://techcrunch.com/startups/feed/",
    "‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏ô ‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏ï‡∏ï‡πå": "https://news.google.com/rss/search?q=warren+buffett",
    "‡∏Ç‡πà‡∏≤‡∏ß‡∏¢‡∏≤": "https://www.fiercepharma.com/rss.xml"
}

KEYWORDS = [
    "trump", "donald trump", "‡πÇ‡∏î‡∏ô‡∏±‡∏•‡∏î‡πå ‡∏ó‡∏£‡∏±‡∏°‡∏õ‡πå",
    "elon musk", "‡∏≠‡∏µ‡∏•‡∏≠‡∏ô ‡∏°‡∏±‡∏™‡∏Å‡πå", "‡∏°‡∏±‡∏™‡∏Å‡πå",
    "warren buffett", "‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏ô ‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏ï‡∏ï‡πå", "‡πÄ‡∏ö‡∏¥‡∏£‡πå‡∏Å‡πÑ‡∏ä‡∏£‡πå",
    "stock", "‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô", "nasdaq", "dow jones", "s&p", "bond", "interest rate", "yield",
    "crypto", "‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï", "‡∏ö‡∏¥‡∏ó‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå", "bitcoin", "ethereum", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", "defi",
    "ai", "‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå", "openai", "chatgpt", "deeplearning", "machine learning",
    "war", "‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", "‡∏¢‡∏π‡πÄ‡∏Ñ‡∏£‡∏ô", "‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢", "‡πÑ‡∏ï‡πâ‡∏´‡∏ß‡∏±‡∏ô", "‡∏à‡∏µ‡∏ô", "‡∏≠‡∏¥‡∏™‡∏£‡∏≤‡πÄ‡∏≠‡∏•", "‡∏Æ‡∏≤‡∏°‡∏≤‡∏™", "‡∏Å‡∏≤‡∏ã‡∏≤",
    "pharma", "drug", "‡∏¢‡∏≤", "‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô", "fda", "clinical trial",
    "startup", "venture capital", "series a", "funding", "tech startup"
]

sent_links = set()

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components
translator = None
summarizer = None

def initialize_components():
    global translator, summarizer
    try:
        logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô translator...")
        translator = Translator()
        logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô summarizer...")
        summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
        logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components: {e}")
        raise

def summarize_and_translate(content):
    try:
        if not content or len(content) < 50:
            return content[:200]
        
        # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ summarize
        content = content[:1000]
        
        if summarizer:
            summary = summarizer(content, max_length=150, min_length=50, do_sample=False)[0]['summary_text']
        else:
            summary = content[:200]
        
        if translator:
            translated = translator.translate(summary, dest='th').text
            return translated
        else:
            return summary
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•: {e}")
        return content[:200]

def create_voice(text, filename="summary.mp3"):
    try:
        tts = gTTS(text=text, lang="th")
        tts.save(filename)
        logger.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {filename}")
    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}")

def create_image(title, summary, filename="news.png"):
    try:
        img = Image.new('RGB', (800, 600), color=(255, 255, 240))
        draw = ImageDraw.Draw(img)
        
        # ‡πÉ‡∏ä‡πâ font ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        font_title = ImageFont.load_default()
        font_body = ImageFont.load_default()

        # ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
        draw.text((40, 40), title, font=font_title, fill=(0, 0, 0))

        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        max_width = 720
        lines = []
        words = summary.split()
        line = ""
        for word in words:
            test_line = line + word + " "
            bbox = draw.textbbox((0, 0), test_line, font=font_body)
            w = bbox[2] - bbox[0]
            if w <= max_width:
                line = test_line
            else:
                lines.append(line)
                line = word + " "
        if line:
            lines.append(line)

        y_text = 100
        line_height = 30
        for l in lines:
            draw.text((40, y_text), l, font=font_body, fill=(50, 50, 50))
            y_text += line_height

        img.save(filename)
        logger.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {filename}")
    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {e}")

def send_discord(text):
    try:
        data = {"content": text}
        response = requests.post(DISCORD_WEBHOOK_URL, json=data, timeout=10)
        if response.status_code == 204:
            logger.info("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            logger.error(f"‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Discord ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Discord: {e}")

def parse_feed_safely(url):
    try:
        feed = feedparser.parse(url)
        return feed
    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô RSS feed {url}: {e}")
        return None

def translate_safely(text, dest='th'):
    try:
        if translator:
            return translator.translate(text, dest=dest).text
        else:
            return text
    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤: {e}")
        return text

def run_news_bot_loop(interval_seconds=300):  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≠‡∏ó‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß Discord")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components
    initialize_components()
    
    while True:
        try:
            logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà")
            
            for cat, url in rss_feeds.items():
                try:
                    logger.info(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö {cat} ‡∏à‡∏≤‡∏Å {url}")
                    
                    feed = parse_feed_safely(url)
                    if not feed or not feed.entries:
                        logger.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô {cat}")
                        continue

                    entry = feed.entries[0]
                    link = entry.link

                    if link in sent_links:
                        logger.info(f"‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô {cat} ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
                        continue

                    content = entry.get("summary", entry.get("description", ""))
                    title = entry.title

                    text_to_check = (title + " " + content).lower()
                    if not any(kw in text_to_check for kw in KEYWORDS):
                        logger.info(f"‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô {cat} ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î")
                        continue

                    logger.info(f"üì∞ ‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô {cat}: {title}")

                    title_th = translate_safely(title)
                    summary_th = summarize_and_translate(content)

                    full_text = (
                        f"üóÇÔ∏è ‡∏´‡∏°‡∏ß‡∏î: {cat}\n"
                        f"üì∞ {title_th}\n\n"
                        f"üìÑ ‡∏™‡∏£‡∏∏‡∏õ:\n{summary_th}\n\n"
                        f"üîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠: {link}"
                    )

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                    # create_image(title_th, summary_th)
                    # create_voice(summary_th)

                    send_discord(full_text)
                    sent_links.add(link)
                    logger.info(f"üì® ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {cat} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    
                    # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
                    time.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {cat}: {e}")
                    continue

            logger.info(f"üò¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å {interval_seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            time.sleep(interval_seconds)
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å: {e}")
            time.sleep(60)  # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

if __name__ == "__main__":
    run_news_bot_loop(interval_seconds=300)
