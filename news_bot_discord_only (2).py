import feedparser
from googletrans import Translator
import requests
import time
import logging
import re

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1391393540252237886/mfR4DoXUhNHJ03EJIaWMxca3M87kxTnfIpLsnmLE0aJb2R5gTtngi6UL5lc7pTBbhPpN"

rss_feeds = {
    "‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á": "http://feeds.bbci.co.uk/news/politics/rss.xml",
    "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à": "http://feeds.reuters.com/reuters/businessNews",
    "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ": "http://feeds.bbci.co.uk/news/technology/rss.xml",
    "AI": "https://www.reuters.com/technology/ai/feed",
    "‡∏´‡∏∏‡πâ‡∏ô": "https://feeds.finance.yahoo.com/rss/2.0/headline?s=^DJI,^GSPC,^IXIC&region=US&lang=en-US",
    "‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï": "https://cryptonews.com/news/feed",
    "‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°": "http://feeds.bbci.co.uk/news/world/rss.xml",
    "‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û": "https://techcrunch.com/startups/feed/",
    "‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏ô ‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏ï‡∏ï‡πå": "https://news.google.com/rss/search?q=warren+buffett",
    "‡∏Ç‡πà‡∏≤‡∏ß‡∏¢‡∏≤": "https://www.fiercepharma.com/rss.xml"
}

KEYWORDS = [
    "trump", "donald trump", "‡πÇ‡∏î‡∏ô‡∏±‡∏•‡∏î‡πå ‡∏ó‡∏£‡∏±‡∏°‡∏õ‡πå",
    "elon musk", "‡∏≠‡∏µ‡∏•‡∏≠‡∏ô ‡∏°‡∏±‡∏™‡∏Å‡πå", "‡∏°‡∏±‡∏™‡∏Å‡πå",
    "warren buffett", "‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏ô ‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏ï‡∏ï‡πå", "‡πÄ‡∏ö‡∏¥‡∏£‡πå‡∏Å‡πÑ‡∏ä‡∏£‡πå",
    "stock", "‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô", "nasdaq", "dow jones", "s&p", "bond", "interest rate", "yield",
    "crypto", "‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï", "‡∏ö‡∏¥‡∏ó‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå", "bitcoin", "ethereum", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", "defi",
    "ai", "‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå", "openai", "chatgpt", "deeplearning", "machine learning",
    "war", "‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", "‡∏¢‡∏π‡πÄ‡∏Ñ‡∏£‡∏ô", "‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢", "‡πÑ‡∏ï‡πâ‡∏´‡∏ß‡∏±‡∏ô", "‡∏à‡∏µ‡∏ô", "‡∏≠‡∏¥‡∏™‡∏£‡∏≤‡πÄ‡∏≠‡∏•", "‡∏Æ‡∏≤‡∏°‡∏≤‡∏™", "‡∏Å‡∏≤‡∏ã‡∏≤",
    "pharma", "drug", "‡∏¢‡∏≤", "‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô", "fda", "clinical trial",
    "startup", "venture capital", "series a", "funding", "tech startup"
]

sent_links = set()
translator = None

def initialize_translator():
    global translator
    try:
        logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô translator...")
        translator = Translator()
        logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô translator ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô translator: {e}")
        translator = None

def clean_text(text):
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    if not text:
        return ""
    
    # ‡∏•‡∏ö HTML tags
    text = re.sub(r'<[^>]+>', '', text)
    # ‡∏•‡∏ö extra whitespace
    text = re.sub(r'\s+', ' ', text).strip()
    return text

def simple_summarize(content, max_length=200):
    """‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏£‡∏Å ‡πÜ"""
    if not content:
        return ""
    
    content = clean_text(content)
    sentences = content.split('.')
    
    summary = ""
    for sentence in sentences:
        if len(summary + sentence) < max_length:
            summary += sentence + ". "
        else:
            break
    
    return summary.strip()

def translate_text(text, dest='th'):
    """‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    try:
        if translator and text:
            result = translator.translate(text, dest=dest)
            return result.text
        else:
            return text
    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤: {e}")
        return text

def send_discord(text):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Discord"""
    try:
        data = {"content": text}
        response = requests.post(DISCORD_WEBHOOK_URL, json=data, timeout=10)
        if response.status_code == 204:
            logger.info("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        else:
            logger.error(f"‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Discord ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Discord: {e}")
        return False

def parse_feed_safely(url):
    """‡∏≠‡πà‡∏≤‡∏ô RSS feed ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        logger.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô RSS: {url}")
        feed = feedparser.parse(url)
        if feed.entries:
            logger.info(f"‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß {len(feed.entries)} ‡∏Ç‡πà‡∏≤‡∏ß")
            return feed
        else:
            logger.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô RSS: {url}")
            return None
    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô RSS feed {url}: {e}")
        return None

def process_news_entry(entry, category):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
    try:
        link = entry.link
        title = entry.title
        content = entry.get("summary", entry.get("description", ""))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if link in sent_links:
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
        text_to_check = (title + " " + content).lower()
        if not any(kw in text_to_check for kw in KEYWORDS):
            return False
        
        # ‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ
        title_th = translate_text(title)
        summary_en = simple_summarize(content, max_length=300)
        summary_th = translate_text(summary_en)
        
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        full_text = (
            f"üóÇÔ∏è ‡∏´‡∏°‡∏ß‡∏î: {category}\n"
            f"üì∞ {title_th}\n\n"
            f"üìÑ ‡∏™‡∏£‡∏∏‡∏õ:\n{summary_th}\n\n"
            f"üîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠: {link}"
        )
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if send_discord(full_text):
            sent_links.add(link)
            logger.info(f"üì® ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {category} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        else:
            return False
            
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πà‡∏≤‡∏ß: {e}")
        return False

def run_news_bot():
    """‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß"""
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≠‡∏ó‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß Discord")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô translator
    initialize_translator()
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    send_discord("ü§ñ ‡∏ö‡∏≠‡∏ó‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
    
    cycle_count = 0
    
    while True:
        try:
            cycle_count += 1
            logger.info(f"üîÑ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {cycle_count} - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà")
            
            news_sent = 0
            
            for category, url in rss_feeds.items():
                try:
                    feed = parse_feed_safely(url)
                    if not feed or not feed.entries:
                        continue
                    
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏£‡∏Å)
                    if process_news_entry(feed.entries[0], category):
                        news_sent += 1
                        time.sleep(3)  # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    
                except Exception as e:
                    logger.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {category}: {e}")
                    continue
            
            logger.info(f"üìä ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {cycle_count} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß {news_sent} ‡∏Ç‡πà‡∏≤‡∏ß")
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            sleep_time = 300
            logger.info(f"üò¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å {sleep_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            time.sleep(sleep_time)
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å: {e}")
            time.sleep(60)  # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

if __name__ == "__main__":
    run_news_bot()
